import React, { useState, useEffect, useRef, useCallback } from 'react';

// Ikony SVG
const Timer = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><polyline points="12,6 12,12 16,14"/></svg>;
const Download = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7,10 12,15 17,10"/><line x1="12" y1="15" x2="12" y2="3"/></svg>;
const Mic = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" y1="19" x2="12" y2="23"/><line x1="8" y1="23" x2="16" y2="23"/></svg>;
const Volume2 = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M11 5L6 9H2v6h4l5 4V5z"/><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"/></svg>;
const Headphones = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M3 18v-6a9 9 0 0 1 18 0v6"/><path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3z"/><path d="M3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"/></svg>;
const Target = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>;
const BarChart3 = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M3 3v18h18"/><path d="M18 17V9"/><path d="M13 17V5"/><path d="M8 17v-3"/></svg>;
const Settings = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3"/><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V5a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82v.07a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/></svg>;
const Info = () => <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12.01" y2="8"/></svg>;

function TreningAPD() {
    // Stan g≈Ç√≥wny
    const [currentModule, setCurrentModule] = useState('speechInNoise');
    const [sessionTime, setSessionTime] = useState(0);
    const [fatigueLevel, setFatigueLevel] = useState(0);
    const [showParentPanel, setShowParentPanel] = useState(false);
    const [volumeCalibrated, setVolumeCalibrated] = useState(false);
    const [manualSNR, setManualSNR] = useState(10);
    const [useManualSNR, setUseManualSNR] = useState(false);

    // Adaptacyjna kontrola trudno≈õci
    const [adaptiveState, setAdaptiveState] = useState({
        correctStreak: 0,
        reversals: 0,
        currentSNR: 10,
        stepSize: 2,
        history: []
    });

    // Modu≈Ç: Mowa w szumie
    const [speechInNoiseState, setSpeechInNoiseState] = useState({
        currentSentence: '',
        sentenceWords: [],
        noiseType: 'white',
        userInput: ''
    });

    // Modu≈Ç: Rozpoznawanie d≈∫wiƒôk√≥w
    const [soundRecognitionState, setSoundRecognitionState] = useState({
        options: [],
        correctSound: '',
        noiseType: 'white',
        soundsLibrary: [
            { name: 'Pies szczeka', sound: 'hau hau hau', image: 'üêï' },
            { name: 'Kot miauczy', sound: 'miau miau miau', image: 'üê±' },
            { name: 'Krowa robi', sound: 'muuu muuu', image: 'üêÑ' },
            { name: 'Samoch√≥d jedzie', sound: 'wruum wruum wruum', image: 'üöó' },
            { name: 'Deszcz pada', sound: 'kap kap kap kap', image: 'üåßÔ∏è' },
            { name: 'Ptaki ≈õpiewajƒÖ', sound: 'ƒáwir ƒáwir ƒáwir', image: 'üê¶' },
            { name: 'Dzwonek dzwoni', sound: 'dzy≈Ñ dzy≈Ñ dzy≈Ñ', image: 'üîî' },
            { name: 'Bƒôben bije', sound: 'bum bum bum bum', image: 'ü•Å' }
        ]
    });

    // Lateralizacja - ROZBUDOWANA o sekwencje cyfr
    const [lateralizationState, setLateralizationState] = useState({
        mode: 'simple',
        currentEar: '',
        panningValue: 0,
        digitSequence: [],
        userDigitSequence: [],
        sequenceLength: 3,
        currentDigitIndex: 0
    });

    // Audio + Motor
    const [audioMotorState, setAudioMotorState] = useState({
        currentCommand: '',
        commands: [
            'Kla≈õnij jeden raz',
            'Tupnij dwa razy', 
            'Podnie≈õ prawƒÖ rƒôkƒô',
            'Dotknij nosa',
            'Kla≈õnij dwa razy i tupnij',
            'Podnie≈õ lewƒÖ nogƒô',
            'Dotknij prawego ucha',
            'Zr√≥b krok w prz√≥d',
            'Podnie≈õ obie rƒôce',
            'Dotknij lewego kolana'
        ],
        parentCheck: false
    });

    // ROZBUDOWANA BAZA ZDA≈É - 80+ zda≈Ñ!
    const sentences = [
        // ≈ªycie codzienne - podstawowe
        'Mama gotuje obiad',
        'Tata czyta gazetƒô',
        'Babcia piecze ciasto',
        'Dziadek oglƒÖda telewizjƒô',
        'Kot ≈õpi na kanapie',
        'Pies biegnie po parku',
        'Dziecko bawi siƒô zabawkami',
        'Kura znosi jajka',
        
        // Szko≈Ça i nauka
        'Nauczycielka pisze na tablicy',
        'Uczniowie rozwiƒÖzujƒÖ zadania',
        'Dziecko rysuje kredkami',
        'Ch≈Çopiec czyta ksiƒÖ≈ºkƒô',
        'Dziewczynka liczy do dziesiƒôciu',
        'Klasa ≈õpiewa piosenkƒô',
        'Dzieci biegnƒÖ na boisko',
        'Wychowawczyni opowiada bajkƒô',
        
        // Emocje i stany
        'Dziecko jest szczƒô≈õliwe',
        'Mama siƒô martwi',
        'Tata jest zmƒôczony',
        'Babcia czuje siƒô dobrze',
        'Kot jest g≈Çodny',
        'Pies jest smutny',
        'Dziewczynka p≈Çacze',
        'Ch≈Çopiec siƒô ≈õmieje',
        
        // Kolory i opisy
        'Czerwona r√≥≈ºa pachnie piƒôknie',
        'Niebieska koszula wisi w szafie',
        '≈ª√≥≈Çty s≈Çonecznik ro≈õnie w ogrodzie',
        'Zielona trawa jest mokra',
        'Bia≈Çy kot myje siƒô ≈ÇapkƒÖ',
        'Czarna kurtka wisi na wieszaku',
        'R√≥≈ºowe kwiaty kwitnƒÖ wiosnƒÖ',
        'BrƒÖzowy pies goni pi≈Çkƒô',
        
        // Trudne grupy sp√≥≈Çg≈Çoskowe
        'Trzeba kupiƒá chleb',
        'Krzak krzewi siƒô w krzakach',
        'Wszyscy chrznƒÖ w ko≈õciele',
        'ChrzƒÖszcz brzmi w trzcinie',
        'Przyniosƒô prze≈õliczne prezenty',
        'Strza≈Ç strzeli≈Ç bardzo g≈Ço≈õno',
        'Pszczo≈Ça brzuczy przy pstryku',
        '≈ª√≥≈Çƒá ≈º√≥≈Çtego ≈º√≥≈Çwia',
        
        // Czasy przesz≈Çe
        'Wczoraj jedli≈õmy pizzƒô',
        'Dzieci bawi≈Çy siƒô w parku',
        'Mama przygotowa≈Ça ≈õniadanie',
        'Tata naprawi≈Ç rower',
        'Kot z≈Çapa≈Ç mysz',
        'Pies szczeka≈Ç na listonosza',
        'Babcia upiek≈Ça ciasto',
        'Dziadek czyta≈Ç bajki',
        
        // Czasy przysz≈Çe
        'Jutro p√≥jdziemy do kina',
        'Mama ugotuje zupƒô',
        'Dzieci bƒôdƒÖ siƒô uczyƒá',
        'Tata kupi nowy samoch√≥d',
        'Kot bƒôdzie spa≈Ç',
        'Pies pobiegnie na spacer',
        'Babcia odwiedzi nas',
        'Dziadek poka≈ºe zdjƒôcia',
        
        // Homofony i podobnie brzmiƒÖce
        'Tata pije wodƒô',
        'Tata bije wodƒô',
        'Kot ≈Çowi myszy',
        'Kot ≈Çowi muchy', 
        'Mama szyje sukienkƒô',
        'Mama myje sukienkƒô',
        'Dziecko bierze ksiƒÖ≈ºkƒô',
        'Dziecko chowa ksiƒÖ≈ºkƒô',
        
        // Z≈Ço≈ºone struktury
        'Gdy pada deszcz, dzieci zostajƒÖ w domu',
        'Kiedy mama gotuje, tata pomaga',
        'Poniewa≈º jest zimno, zak≈Çadamy kurtki',
        'Chocia≈º jest trudno, dziecko siƒô uczy',
        'Je≈õli bƒôdzie s≈Çonecznie, p√≥jdziemy na pla≈ºƒô',
        'Zanim p√≥jdziemy spaƒá, myjemy zƒôby',
        'Dop√≥ki nie sko≈Ñczy pracy, tata zostanie',
        'Wszƒôdzie gdzie spojrzysz, sƒÖ kwiaty',
        
        // Pytania
        'Czy mama przygotowa≈Ça obiad?',
        'Gdzie jest moja zabawka?',
        'Kiedy bƒôdziemy je≈õƒá kolacjƒô?',
        'Dlaczego kot ≈õpi tak d≈Çugo?',
        'Jak nazywa siƒô ten ptak?',
        'Kto w≈ÇƒÖczy≈Ç muzykƒô?',
        'Co robimy jutro?',
        'Kt√≥rƒÖ drogƒÖ idziemy do szko≈Çy?',
        
        // Rozkazy i pro≈õby
        'Zamknij drzwi',
        'Przynie≈õ mi ksiƒÖ≈ºkƒô',
        'W≈ÇƒÖcz ≈õwiat≈Ço proszƒô',
        'UsiƒÖd≈∫ przy stole',
        'Umyj rƒôce przed jedzeniem',
        'Po≈Ç√≥≈º zabawki na p√≥≈Çkƒô',
        'Ubierz siƒô ciep≈Ço',
        'PosprzƒÖtaj sw√≥j pok√≥j'
    ];

    // Refs dla audio
    const audioContextRef = useRef(null);
    const noiseRef = useRef(null);
    const speechRef = useRef(null);

    // Timer sesji
    useEffect(() => {
        const timer = setInterval(() => {
            setSessionTime(prev => prev + 1);
            setFatigueLevel(prev => Math.min(100, prev + 0.1));
        }, 1000);
        return () => clearInterval(timer);
    }, []);

    // Inicjalizacja AudioContext
    const initializeAudioContext = useCallback(() => {
        if (!audioContextRef.current) {
            try {
                audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.warn('AudioContext not supported');
            }
        }
        return audioContextRef.current;
    }, []);

    // ZAAWANSOWANY GENERATOR SZUM√ìW - r√≥≈ºne typy z dwoma kana≈Çami
    const generateNoise = useCallback((ctx, type, duration = 10) => {
        console.log(`üîä GENEROWANIE SZUMU ${type.toUpperCase()} - ${duration}s dwukana≈Çowego`);

        const bufferSize = ctx.sampleRate * duration;
        const noiseBuffer = ctx.createBuffer(2, bufferSize, ctx.sampleRate);

        for (let channel = 0; channel < noiseBuffer.numberOfChannels; channel++) {
            const channelData = noiseBuffer.getChannelData(channel);

            switch(type) {
                case 'white':
                    for (let i = 0; i < bufferSize; i++) {
                        channelData[i] = (Math.random() * 2 - 1) * 0.3;
                    }
                    break;

                case 'pink':
                    let b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;
                    for (let i = 0; i < bufferSize; i++) {
                        const white = Math.random() * 2 - 1;
                        b0 = 0.99886 * b0 + white * 0.0555179;
                        b1 = 0.99332 * b1 + white * 0.0750759;
                        b2 = 0.96900 * b2 + white * 0.1538520;
                        b3 = 0.86650 * b3 + white * 0.3104856;
                        b4 = 0.55000 * b4 + white * 0.5329522;
                        b5 = -0.7616 * b5 - white * 0.0168980;
                        const pink = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                        b6 = white * 0.115926;
                        channelData[i] = pink * 0.11;
                    }
                    break;

                case 'brown':
                    let lastOut = 0;
                    for (let i = 0; i < bufferSize; i++) {
                        const white = Math.random() * 2 - 1;
                        const brown = (lastOut + (0.02 * white)) / 1.02;
                        lastOut = brown;
                        channelData[i] = brown * 3.5;
                    }
                    break;

                case 'babble':
                    // Symulacja g≈Ços√≥w w tle
                    for (let i = 0; i < bufferSize; i++) {
                        const freq = 200 + Math.random() * 2000;
                        const time = i / ctx.sampleRate;
                        channelData[i] = Math.sin(2 * Math.PI * freq * time) * 0.15 * (Math.random() * 0.5 + 0.5);
                    }
                    break;

                default:
                    // Bia≈Çy szum jako domy≈õlny
                    for (let i = 0; i < bufferSize; i++) {
                        channelData[i] = (Math.random() * 2 - 1) * 0.3;
                    }
            }
        }

        return noiseBuffer;
    }, []);

    // Adaptacyjny algorytm trudno≈õci
    const updateAdaptive = useCallback((isCorrect) => {
        setAdaptiveState(prev => {
            let newSNR = prev.currentSNR;
            let newStepSize = prev.stepSize;
            let newReversals = prev.reversals;
            
            if (isCorrect) {
                const newStreak = prev.correctStreak + 1;
                if (newStreak >= 2) {
                    newSNR = Math.max(-20, newSNR - newStepSize);
                    if (newSNR !== prev.currentSNR && prev.history.length > 0 && 
                        prev.history[prev.history.length - 1] > newSNR) {
                        newReversals++;
                        newStepSize = newReversals >= 2 ? Math.max(0.5, newStepSize / 2) : newStepSize;
                    }
                }
                
                return {
                    ...prev,
                    correctStreak: newStreak,
                    currentSNR: newSNR,
                    stepSize: newStepSize,
                    reversals: newReversals,
                    history: [...prev.history, newSNR]
                };
            } else {
                newSNR = Math.min(30, newSNR + newStepSize);
                if (prev.history.length > 0 && prev.history[prev.history.length - 1] < newSNR) {
                    newReversals++;
                    newStepSize = newReversals >= 2 ? Math.max(0.5, newStepSize / 2) : newStepSize;
                }
                
                return {
                    ...prev,
                    correctStreak: 0,
                    currentSNR: newSNR,
                    stepSize: newStepSize,
                    reversals: newReversals,
                    history: [...prev.history, newSNR]
                };
            }
        });
    }, []);

    // üéØ SYSTEM R√ìWNOLEG≈ÅYCH KANA≈Å√ìW - KLUCZ APLIKACJI!
    const playParallelChannelsTest = useCallback((noiseType, speechText, snr = 10) => {
        window.testStartTime = Date.now();
        const effectiveSNR = useManualSNR ? manualSNR : snr;

        const ctx = initializeAudioContext();
        console.log(`T=0.000: üöÄ ROZPOCZYNAM TEST R√ìWNOLEG≈ÅYCH KANA≈Å√ìW`);
        console.log(`T=0.000: Szum: ${noiseType}, SNR: ${effectiveSNR}dB, Tekst: "${speechText}"`);

        // KANA≈Å 1: SZUM - startuje NATYCHMIAST
        const noiseBuffer = generateNoise(ctx, noiseType, 10);
        const noiseSource = ctx.createBufferSource();
        const noiseGain = ctx.createGain();

        noiseSource.buffer = noiseBuffer;

        const noiseLevel = Math.pow(10, -effectiveSNR/20) * 0.5;
        noiseGain.gain.setValueAtTime(noiseLevel, ctx.currentTime);
        console.log(`T=0.000: üîä SZUM ${noiseType.toUpperCase()} ROZPOCZƒòTY - poziom: ${noiseLevel.toFixed(3)}`);

        noiseSource.connect(noiseGain);
        noiseGain.connect(ctx.destination);
        noiseSource.start(ctx.currentTime);
        noiseSource.stop(ctx.currentTime + 10);

        // KANA≈Å 2: MOWA - startuje po 2-2.5 sekundach
        const speechDelay = 2 + Math.random() * 0.5;
        console.log(`T=${speechDelay.toFixed(3)}: üé§ MOWA ZAPLANOWANA`);

        setTimeout(() => {
            console.log(`T=${(Date.now() - window.testStartTime) / 1000}: üó£Ô∏è MOWA START - "${speechText}"`);

            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(speechText);
                utterance.lang = 'pl-PL';
                utterance.rate = 0.8;
                utterance.volume = 0.7;

                utterance.onstart = () => {
                    console.log(`T=${(Date.now() - window.testStartTime) / 1000}: ‚úÖ SYNTEZA MOWY ROZPOCZƒòTA`);
                };

                utterance.onend = () => {
                    console.log(`T=${(Date.now() - window.testStartTime) / 1000}: ‚èπÔ∏è SYNTEZA MOWY ZAKO≈ÉCZONA`);
                };

                window.speechSynthesis.speak(utterance);
            }
        }, speechDelay * 1000);
    }, [generateNoise, initializeAudioContext, manualSNR, useManualSNR]);

    // Test d≈∫wiƒôk√≥w zwierzƒÖt z szumem
    const playSoundWithNoise = useCallback((soundText, noiseType, snr = 15) => {
        window.testStartTime = Date.now();
        const effectiveSNR = useManualSNR ? manualSNR : snr;

        const ctx = initializeAudioContext();
        console.log(`T=0.000: üîä TEST D≈πWIƒòKU Z SZUMEM: "${soundText}"`);

        const noiseBuffer = generateNoise(ctx, noiseType, 8);
        const noiseSource = ctx.createBufferSource();
        const noiseGain = ctx.createGain();

        noiseSource.buffer = noiseBuffer;
        const noiseLevel = Math.pow(10, -effectiveSNR/20) * 0.4;
        noiseGain.gain.setValueAtTime(noiseLevel, ctx.currentTime);

        noiseSource.connect(noiseGain);
        noiseGain.connect(ctx.destination);
        noiseSource.start(ctx.currentTime);
        noiseSource.stop(ctx.currentTime + 8);

        console.log(`T=0.000: üåä SZUM ${noiseType.toUpperCase()} ROZPOCZƒòTY`);

        setTimeout(() => {
            console.log(`T=${(Date.now() - window.testStartTime) / 1000}: üêæ D≈πWIƒòK START - "${soundText}"`);

            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(soundText);
                utterance.lang = 'pl-PL';
                utterance.rate = 0.7;
                utterance.volume = 0.8;
                window.speechSynthesis.speak(utterance);
            }
        }, 1500);
    }, [generateNoise, initializeAudioContext, manualSNR, useManualSNR]);

    // Odtwarzanie z panningiem (Web Audio API)
    const playWithPanning = useCallback((frequency, pan = 0, duration = 1000) => {
        const ctx = initializeAudioContext();

        const oscillator = ctx.createOscillator();
        const gainNode = ctx.createGain();
        const panNode = ctx.createStereoPanner();

        oscillator.frequency.setValueAtTime(frequency, ctx.currentTime);
        oscillator.type = 'sine';

        panNode.pan.setValueAtTime(pan, ctx.currentTime);
        gainNode.gain.setValueAtTime(0.3, ctx.currentTime);

        oscillator.connect(panNode);
        panNode.connect(gainNode);
        gainNode.connect(ctx.destination);

        oscillator.start();
        oscillator.stop(ctx.currentTime + duration / 1000);
    }, [initializeAudioContext]);

    // Nowe ƒáwiczenie - mowa w szumie
    const startSpeechInNoise = useCallback(() => {
        const sentence = sentences[Math.floor(Math.random() * sentences.length)];
        const words = sentence.toLowerCase().split(' ');
        
        setSpeechInNoiseState(prev => ({
            ...prev,
            currentSentence: sentence,
            sentenceWords: words,
            userInput: ''
        }));
        
        playParallelChannelsTest(speechInNoiseState.noiseType, sentence, useManualSNR ? manualSNR : adaptiveState.currentSNR);
    }, [sentences, playParallelChannelsTest, speechInNoiseState.noiseType, manualSNR, useManualSNR, adaptiveState.currentSNR]);

    // Sprawdzanie odpowiedzi
    const checkSpeechAnswer = useCallback(() => {
        const userWords = speechInNoiseState.userInput.toLowerCase().trim().split(/\s+/);
        const targetWords = speechInNoiseState.sentenceWords;
        
        let correctWords = 0;
        userWords.forEach(word => {
            if (targetWords.includes(word)) correctWords++;
        });
        
        const accuracy = correctWords / targetWords.length;
        const isCorrect = accuracy >= 0.7;
        
        updateAdaptive(isCorrect);
        
        console.log(`üìä Odpowied≈∫: ${(accuracy * 100).toFixed(1)}% poprawna (${correctWords}/${targetWords.length} s≈Ç√≥w)`);
        
        setSpeechInNoiseState(prev => ({
            ...prev,
            currentSentence: '',
            sentenceWords: [],
            userInput: ''
        }));
    }, [speechInNoiseState, updateAdaptive]);

    // Modu≈Ç rozpoznawania d≈∫wiƒôk√≥w
    const startSoundRecognition = useCallback(() => {
        const correctIndex = Math.floor(Math.random() * soundRecognitionState.soundsLibrary.length);
        const correct = soundRecognitionState.soundsLibrary[correctIndex];
        
        const shuffled = [...soundRecognitionState.soundsLibrary]
            .sort(() => Math.random() - 0.5)
            .slice(0, 4);
            
        if (!shuffled.includes(correct)) {
            shuffled[0] = correct;
        }
        
        setSoundRecognitionState(prev => ({
            ...prev,
            options: shuffled,
            correctSound: correct.name
        }));
        
        playSoundWithNoise(correct.sound, soundRecognitionState.noiseType, useManualSNR ? manualSNR : adaptiveState.currentSNR);
    }, [soundRecognitionState.soundsLibrary, soundRecognitionState.noiseType, playSoundWithNoise, manualSNR, useManualSNR, adaptiveState.currentSNR]);

    // Lateralizacja - prosta z d≈∫wiƒôkami
    const startSimpleLateralization = useCallback(() => {
        const ears = ['Lewe ucho', 'Prawe ucho'];
        const selectedEar = ears[Math.floor(Math.random() * ears.length)];
        const pan = selectedEar === 'Lewe ucho' ? -1 : 1;
        
        setLateralizationState(prev => ({
            ...prev,
            currentEar: selectedEar,
            panningValue: pan
        }));
        
        console.log(`üëÇ LATERALIZACJA: ${selectedEar} (pan: ${pan})`);
        
        // U≈ºyj Web Audio API z prawdziwym panningiem
        playWithPanning(800, pan, 1000);
    }, [playWithPanning]);

    // NOWA: Lateralizacja z sekwencjami cyfr
    const startDigitSequence = useCallback(() => {
        const length = lateralizationState.sequenceLength;
        const sequence = Array.from({length}, () => Math.floor(Math.random() * 10));
        
        setLateralizationState(prev => ({
            ...prev,
            mode: 'sequence',
            digitSequence: sequence,
            userDigitSequence: [],
            currentDigitIndex: 0
        }));
        
        playDigitSequenceWithPanning(sequence, () => {
            console.log('üî¢ SEKWENCJA CYFR ZAKO≈ÉCZONA - czekam na odpowied≈∫');
        });
    }, [lateralizationState.sequenceLength]);

    // ZAAWANSOWANE odtwarzanie sekwencji cyfr z szumem i panningiem  
    const playDigitSequenceWithPanning = useCallback((sequence, onComplete) => {
        window.testStartTime = Date.now();
        const ctx = initializeAudioContext();
        
        console.log(`üî¢ SEKWENCJA CYFR START: ${sequence.join('-')} (alternating L-R z szumem)`);
        
        // Szum w tle przez ca≈ÇƒÖ sekwencjƒô
        const noiseBuffer = generateNoise(ctx, 'white', sequence.length * 2);
        const noiseSource = ctx.createBufferSource();
        const noiseGain = ctx.createGain();
        
        noiseSource.buffer = noiseBuffer;
        const noiseLevel = 0.2; // Delikatny szum w tle
        noiseGain.gain.setValueAtTime(noiseLevel, ctx.currentTime);
        
        noiseSource.connect(noiseGain);
        noiseGain.connect(ctx.destination);
        noiseSource.start(ctx.currentTime);
        noiseSource.stop(ctx.currentTime + sequence.length * 2);
        
        // Cyfry z alternujƒÖcym panningiem
        sequence.forEach((digit, index) => {
            setTimeout(() => {
                const pan = index % 2 === 0 ? -1 : 1;
                const ear = pan < 0 ? 'LEWE' : 'PRAWE';
                
                console.log(`T=${(index * 1.5).toFixed(1)}s: Cyfra "${digit}" ‚Üí ${ear} UCHO (pan: ${pan})`);

                // Tone z panningiem jako wskazanie ucha
                playWithPanning(400 + (digit * 50), pan, 200);
                
                // Mowa po kr√≥tkim op√≥≈∫nieniu
                setTimeout(() => {
                    if ('speechSynthesis' in window) {
                        const utterance = new SpeechSynthesisUtterance(digit.toString());
                        utterance.lang = 'pl-PL';
                        utterance.rate = 0.6;
                        utterance.volume = 0.9;
                        utterance.pitch = 1.0;
                        
                        window.speechSynthesis.speak(utterance);
                    }
                }, 300);

                if (index === sequence.length - 1) {
                    setTimeout(onComplete, 2000);
                }
            }, index * 1500);
        });
    }, [generateNoise, initializeAudioContext, playWithPanning]);

    // Sprawdzanie sekwencji cyfr
    const checkDigitSequence = useCallback(() => {
        const correct = JSON.stringify(lateralizationState.digitSequence);
        const user = JSON.stringify(lateralizationState.userDigitSequence);
        const isCorrect = correct === user;
        
        console.log(`üîç SPRAWDZENIE SEKWENCJI:`);
        console.log(`Prawid≈Çowa: [${lateralizationState.digitSequence.join(', ')}]`);
        console.log(`Podana: [${lateralizationState.userDigitSequence.join(', ')}]`);
        console.log(`Wynik: ${isCorrect ? '‚úÖ POPRAWNE' : '‚ùå B≈ÅƒòDNE'}`);
        
        updateAdaptive(isCorrect);
        
        setLateralizationState(prev => ({
            ...prev,
            digitSequence: [],
            userDigitSequence: [],
            currentDigitIndex: 0
        }));
    }, [lateralizationState, updateAdaptive]);

    // Dodawanie cyfry do sekwencji u≈ºytkownika
    const addDigitToSequence = useCallback((digit) => {
        setLateralizationState(prev => {
            const newSequence = [...prev.userDigitSequence, digit];
            console.log(`‚ûï Dodano cyfrƒô: ${digit}, sekwencja: [${newSequence.join(', ')}]`);
            return {
                ...prev,
                userDigitSequence: newSequence
            };
        });
    }, []);

    // Format czasu
    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    // SNR do koloru
    const getSNRColor = (snr) => {
        if (snr < -10) return 'text-red-600';
        if (snr < 0) return 'text-orange-600';
        if (snr < 10) return 'text-yellow-600';
        if (snr < 20) return 'text-green-600';
        return 'text-blue-600';
    };

    // Definicje modu≈Ç√≥w z uzasadnieniami terapeutycznymi
    const modules = {
        speechInNoise: {
            name: 'Mowa w Szumie',
            icon: <Mic />,
            description: 'Rozpoznawanie mowy przy obecno≈õci szumu t≈Ça',
            therapeutic: {
                goal: 'Rozw√≥j zdolno≈õci selektywnej uwagi s≈Çuchowej',
                neurobiology: 'Wzmacnia funkcje kory s≈Çuchowej i mechanizmy maskowania wstecznego',
                clinicalValue: 'Kluczowe dla funkcjonowania w ≈õrodowisku klasowym i spo≈Çecznym'
            }
        },
        soundRecognition: {
            name: 'Rozpoznawanie D≈∫wiƒôk√≥w',
            icon: <Volume2 />,
            description: 'Identyfikacja d≈∫wiƒôk√≥w ≈õrodowiskowych',
            therapeutic: {
                goal: 'Rozw√≥j dyskryminacji s≈Çuchowej i pamiƒôci d≈∫wiƒôkowej',
                neurobiology: 'Aktywuje korteks s≈Çuchowy wt√≥rny odpowiedzialny za rozpoznawanie wzorc√≥w',
                clinicalValue: 'Podstawa dla rozwoju umiejƒôtno≈õci jƒôzykowych i czytania'
            }
        },
        lateralization: {
            name: 'Lateralizacja',
            icon: <Headphones />,
            description: 'ƒÜwiczenia przestrzennego s≈Çyszenia',
            therapeutic: {
                goal: 'Rozw√≥j binauralnego przetwarzania i lokalizacji d≈∫wiƒôku',
                neurobiology: 'Wzmacnia po≈ÇƒÖczenia miƒôdzy p√≥≈Çkulami m√≥zgu przez corpus callosum',
                clinicalValue: 'Kluczowe dla umiejƒôtno≈õci s≈Çuchania w ha≈Çasie i uwagi skoncentrowanej'
            }
        },
        audioMotor: {
            name: 'Audio-Motor',
            icon: <Target />,
            description: 'Integracja s≈Çuchu z ruchem',
            therapeutic: {
                goal: 'Synchronizacja proces√≥w s≈Çuchowych z motorycznymi',
                neurobiology: 'Integruje korƒô s≈ÇuchowƒÖ z korƒÖ motorycznƒÖ przez system lustrzanych neuron√≥w',
                clinicalValue: 'Wspiera rozw√≥j mowy, rytmu i koordynacji ruchowej'
            }
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
            {/* Header */}
            <header className="bg-white rounded-lg shadow-md p-6 mb-6">
                <div className="flex items-center justify-between">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-800">
                            üéß Trening APD
                        </h1>
                        <p className="text-gray-600 mt-1">System terapii zaburze≈Ñ przetwarzania s≈Çuchowego</p>
                    </div>
                    
                    <div className="flex items-center gap-4">
                        <div className="text-center">
                            <div className="flex items-center gap-2 text-gray-600">
                                <Timer />
                                <span>{formatTime(sessionTime)}</span>
                            </div>
                            <div className="text-xs text-gray-500">Czas sesji</div>
                        </div>
                        
                        <button
                            onClick={() => setShowParentPanel(!showParentPanel)}
                            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 flex items-center gap-2"
                        >
                            <BarChart3 />
                            Panel Terapeuty
                        </button>
                    </div>
                </div>

                {/* GLOBALNY SUWAK SNR */}
                <div className="mt-6 bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-gray-800">üéõÔ∏è Globalny SNR Control</h3>
                        <div className="flex items-center gap-3">
                            <span className="text-sm font-medium">AUTO</span>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={useManualSNR}
                                    onChange={(e) => setUseManualSNR(e.target.checked)}
                                    className="sr-only peer"
                                />
                                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                            </label>
                            <span className="text-sm font-medium">MANUAL</span>
                        </div>
                    </div>
                    
                    {useManualSNR && (
                        <div className="space-y-2">
                            <div className="flex items-center gap-4">
                                <span className="text-sm font-medium min-w-16">SNR:</span>
                                <div className="flex-1 relative">
                                    <input
                                        type="range"
                                        min="-20"
                                        max="30"
                                        step="0.5"
                                        value={manualSNR}
                                        onChange={(e) => setManualSNR(parseFloat(e.target.value))}
                                        className="w-full h-3 rounded-lg appearance-none cursor-pointer"
                                        style={{
                                            background: 'linear-gradient(to right, #ef4444 0%, #f97316 25%, #eab308 50%, #22c55e 75%, #3b82f6 100%)'
                                        }}
                                    />
                                </div>
                                <span className={`text-lg font-bold min-w-20 ${getSNRColor(manualSNR)}`}>
                                    {manualSNR.toFixed(1)}dB
                                </span>
                            </div>
                            <div className="text-xs text-gray-500 text-center">
                                üí° Manual SNR wy≈ÇƒÖcza adaptacyjny algorytm trudno≈õci
                            </div>
                        </div>
                    )}
                    
                    {!useManualSNR && (
                        <div className="text-center">
                            <span className={`text-lg font-bold ${getSNRColor(adaptiveState.currentSNR)}`}>
                                Auto SNR: {adaptiveState.currentSNR.toFixed(1)}dB
                            </span>
                            <div className="text-xs text-gray-500 mt-1">
                                ü§ñ Adaptacja: {adaptiveState.correctStreak} poprawnych | {adaptiveState.reversals} odwr√≥ce≈Ñ
                            </div>
                        </div>
                    )}
                </div>
            </header>

            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                {/* Sidebar - wyb√≥r modu≈Ç√≥w */}
                <div className="lg:col-span-1">
                    <div className="bg-white rounded-lg shadow-md p-4">
                        <h2 className="text-lg font-semibold text-gray-800 mb-4">Modu≈Çy Terapeutyczne</h2>
                        
                        {Object.entries(modules).map(([key, module]) => (
                            <button
                                key={key}
                                onClick={() => setCurrentModule(key)}
                                className={`w-full mb-3 p-4 rounded-lg text-left transition-all ${
                                    currentModule === key
                                        ? 'bg-blue-500 text-white shadow-lg'
                                        : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                                }`}
                            >
                                <div className="flex items-center gap-3">
                                    {module.icon}
                                    <div>
                                        <div className="font-semibold">{module.name}</div>
                                        <div className="text-xs opacity-75">{module.description}</div>
                                    </div>
                                </div>
                            </button>
                        ))}
                    </div>

                    {/* Kalibracja d≈∫wiƒôku */}
                    <div className="bg-white rounded-lg shadow-md p-4 mt-4">
                        <h3 className="font-semibold text-gray-800 mb-3">üîä Kalibracja</h3>
                        
                        {!volumeCalibrated ? (
                            <div className="space-y-3">
                                <p className="text-sm text-gray-600">
                                    Ustaw wygodny poziom g≈Ço≈õno≈õci
                                </p>
                                <button
                                    onClick={() => {
                                        if ('speechSynthesis' in window) {
                                            const utterance = new SpeechSynthesisUtterance('To jest test d≈∫wiƒôku');
                                            utterance.lang = 'pl-PL';
                                            window.speechSynthesis.speak(utterance);
                                        }
                                    }}
                                    className="w-full bg-green-500 text-white py-2 rounded hover:bg-green-600"
                                >
                                    üîä Test D≈∫wiƒôku
                                </button>
                                <button
                                    onClick={() => setVolumeCalibrated(true)}
                                    className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
                                >
                                    ‚úÖ Gotowe
                                </button>
                            </div>
                        ) : (
                            <div className="text-center">
                                <div className="text-green-600 text-2xl mb-2">‚úÖ</div>
                                <p className="text-sm text-gray-600">D≈∫wiƒôk skalibrowany</p>
                                <button
                                    onClick={() => setVolumeCalibrated(false)}
                                    className="text-xs text-blue-500 hover:underline mt-2"
                                >
                                    Ponowna kalibracja
                                </button>
                            </div>
                        )}
                    </div>
                </div>

                {/* G≈Ç√≥wny obszar ƒáwicze≈Ñ */}
                <div className="lg:col-span-3">
                    {!volumeCalibrated ? (
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-8 text-center">
                            <div className="text-4xl mb-4">üéß</div>
                            <h3 className="text-xl font-semibold text-yellow-800 mb-2">
                                Najpierw skalibruj d≈∫wiƒôk
                            </h3>
                            <p className="text-yellow-700">
                                U≈ºyj panelu po lewej stronie, aby ustawiƒá odpowiedni poziom g≈Ço≈õno≈õci
                            </p>
                        </div>
                    ) : (
                        <div className="space-y-6">
                            {/* Panel uzasadnienia terapeutycznego */}
                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div className="flex items-start gap-3">
                                    <Info />
                                    <div>
                                        <h4 className="font-semibold text-blue-800 mb-2">
                                            üë©‚Äç‚öïÔ∏è Uzasadnienie: {modules[currentModule].name}
                                        </h4>
                                        <div className="text-sm text-blue-700 space-y-1">
                                            <p><strong>Cel:</strong> {modules[currentModule].therapeutic.goal}</p>
                                            <p><strong>Neurobiologia:</strong> {modules[currentModule].therapeutic.neurobiology}</p>
                                            <p><strong>Warto≈õƒá kliniczna:</strong> {modules[currentModule].therapeutic.clinicalValue}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* üé§ MODU≈Å: MOWA W SZUMIE */}
                            {currentModule === 'speechInNoise' && (
                                <div className="space-y-6">
                                    <div className="bg-green-50 rounded-lg p-4">
                                        <h3 className="text-lg font-semibold text-green-800 mb-4">
                                            üé§ Rozumienie Mowy w Szumie
                                        </h3>

                                        {/* Wyb√≥r typu szumu */}
                                        <div className="bg-white rounded-lg p-4 mb-4">
                                            <h4 className="font-semibold mb-3">üîä Typ szumu t≈Ça:</h4>
                                            <div className="grid grid-cols-2 gap-2">
                                                {[
                                                    { type: 'white', name: 'Bia≈Çy Szum', desc: 'R√≥wnomierne widmo', emoji: '‚ö™' },
                                                    { type: 'pink', name: 'R√≥≈ºowy Szum', desc: 'Naturalniejszy', emoji: 'üå∏' },
                                                    { type: 'brown', name: 'BrƒÖzowy Szum', desc: 'G≈Çƒôbokie czƒôstotliwo≈õci', emoji: 'üü§' },
                                                    { type: 'babble', name: 'Babble Noise', desc: 'G≈Çosy w tle', emoji: 'üë•' }
                                                ].map(noise => (
                                                    <button
                                                        key={noise.type}
                                                        onClick={() => setSpeechInNoiseState(prev => ({...prev, noiseType: noise.type}))}
                                                        className={`p-3 rounded-lg text-left transition-all ${
                                                            speechInNoiseState.noiseType === noise.type
                                                                ? 'bg-green-500 text-white shadow-lg'
                                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                        }`}
                                                    >
                                                        <div className="font-semibold text-sm">{noise.emoji} {noise.name}</div>
                                                        <div className="text-xs opacity-75">{noise.desc}</div>
                                                    </button>
                                                ))}
                                            </div>
                                            <div className="text-xs text-gray-500 mt-2 text-center">
                                                üí° Dwukana≈Çowe audio: szum startuje natychmiast, mowa po 2s op√≥≈∫nieniu
                                            </div>
                                        </div>

                                        {!speechInNoiseState.currentSentence ? (
                                            <button
                                                onClick={startSpeechInNoise}
                                                className="w-full bg-green-600 text-white px-6 py-4 rounded-lg text-lg font-semibold hover:bg-green-700"
                                            >
                                                ‚ñ∂Ô∏è Start ƒÜwiczenia
                                            </button>
                                        ) : (
                                            <div className="space-y-4">
                                                <div className="bg-white rounded-lg p-4 text-center">
                                                    <p className="text-gray-600 mb-4">
                                                        Wpisz us≈Çyszane zdanie:
                                                    </p>
                                                    
                                                    <input
                                                        type="text"
                                                        value={speechInNoiseState.userInput}
                                                        onChange={(e) => setSpeechInNoiseState(prev => ({
                                                            ...prev,
                                                            userInput: e.target.value
                                                        }))}
                                                        className="w-full p-3 border border-gray-300 rounded-lg text-lg"
                                                        placeholder="Wpisz us≈Çyszane zdanie..."
                                                        autoFocus
                                                    />
                                                </div>

                                                <div className="flex gap-4 justify-center">
                                                    <button
                                                        onClick={() => playParallelChannelsTest(
                                                            speechInNoiseState.noiseType,
                                                            speechInNoiseState.currentSentence,
                                                            useManualSNR ? manualSNR : adaptiveState.currentSNR
                                                        )}
                                                        className="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600"
                                                    >
                                                        üîÑ Powt√≥rz
                                                    </button>
                                                    
                                                    <button
                                                        onClick={checkSpeechAnswer}
                                                        disabled={!speechInNoiseState.userInput.trim()}
                                                        className="bg-green-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-600 disabled:bg-gray-300"
                                                    >
                                                        ‚úÖ Sprawd≈∫
                                                    </button>
                                                </div>

                                                <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                                                    <p className="text-sm text-yellow-800">
                                                        <strong>üë©‚Äç‚öïÔ∏è Dla terapeuty:</strong> 
                                                        Prawid≈Çowe zdanie: "{speechInNoiseState.currentSentence}"
                                                    </p>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* üîä MODU≈Å: ROZPOZNAWANIE D≈πWIƒòK√ìW */}
                            {currentModule === 'soundRecognition' && (
                                <div className="space-y-6">
                                    <div className="bg-purple-50 rounded-lg p-4">
                                        <h3 className="text-lg font-semibold text-purple-800 mb-4">
                                            üîä Rozpoznawanie D≈∫wiƒôk√≥w ≈örodowiskowych
                                        </h3>

                                        {/* Wyb√≥r typu szumu */}
                                        <div className="bg-white rounded-lg p-4 mb-4">
                                            <h4 className="font-semibold mb-3">üîä Typ szumu t≈Ça:</h4>
                                            <div className="grid grid-cols-2 gap-2">
                                                {[
                                                    { type: 'white', name: 'Bia≈Çy Szum', desc: 'R√≥wnomierne widmo', emoji: '‚ö™' },
                                                    { type: 'pink', name: 'R√≥≈ºowy Szum', desc: 'Naturalniejszy', emoji: 'üå∏' },
                                                    { type: 'brown', name: 'BrƒÖzowy Szum', desc: 'G≈Çƒôbokie czƒôstotliwo≈õci', emoji: 'üü§' },
                                                    { type: 'babble', name: 'Babble Noise', desc: 'G≈Çosy w tle', emoji: 'üë•' }
                                                ].map(noise => (
                                                    <button
                                                        key={noise.type}
                                                        onClick={() => setSoundRecognitionState(prev => ({...prev, noiseType: noise.type}))}
                                                        className={`p-3 rounded-lg text-left transition-all ${
                                                            soundRecognitionState.noiseType === noise.type
                                                                ? 'bg-purple-500 text-white shadow-lg'
                                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                        }`}
                                                    >
                                                        <div className="font-semibold text-sm">{noise.emoji} {noise.name}</div>
                                                        <div className="text-xs opacity-75">{noise.desc}</div>
                                                    </button>
                                                ))}
                                            </div>
                                            <div className="text-xs text-gray-500 mt-2 text-center">
                                                üéß Ka≈ºdy d≈∫wiƒôk odtwarzany z wybranym szumem t≈Ça
                                            </div>
                                        </div>

                                        {soundRecognitionState.options.length === 0 ? (
                                            <button
                                                onClick={startSoundRecognition}
                                                className="w-full bg-purple-600 text-white px-6 py-4 rounded-lg text-lg font-semibold hover:bg-purple-700"
                                            >
                                                ‚ñ∂Ô∏è Odtw√≥rz D≈∫wiƒôk
                                            </button>
                                        ) : (
                                            <div className="space-y-4">
                                                <p className="text-center text-gray-600 mb-4">
                                                    Kt√≥ry d≈∫wiƒôk us≈Çysza≈Çe≈õ?
                                                </p>
                                                
                                                <div className="grid grid-cols-2 gap-4">
                                                    {soundRecognitionState.options.map((sound) => (
                                                        <button
                                                            key={sound.name}
                                                            onClick={() => {
                                                                const isCorrect = sound.name === soundRecognitionState.correctSound;
                                                                updateAdaptive(isCorrect);
                                                                setSoundRecognitionState(prev => ({
                                                                    ...prev,
                                                                    options: [],
                                                                    correctSound: ''
                                                                }));
                                                            }}
                                                            className="bg-white p-4 rounded-lg border-2 border-gray-200 hover:border-purple-400 transition-colors"
                                                        >
                                                            <div className="text-3xl mb-2">{sound.image}</div>
                                                            <div className="font-semibold">{sound.name}</div>
                                                        </button>
                                                    ))}
                                                </div>

                                                <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                                                    <p className="text-sm text-yellow-800">
                                                        <strong>üë©‚Äç‚öïÔ∏è Dla terapeuty:</strong> 
                                                        Prawid≈Çowa odpowied≈∫: "{soundRecognitionState.correctSound}"
                                                    </p>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* üëÇ MODU≈Å: LATERALIZACJA - ROZBUDOWANY */}
                            {currentModule === 'lateralization' && (
                                <div className="space-y-6">
                                    <div className="bg-indigo-50 rounded-lg p-4">
                                        <h3 className="text-lg font-semibold text-indigo-800 mb-4">
                                            üëÇ Lateralizacja i Przestrzenne S≈Çyszenie
                                        </h3>

                                        {/* Wyb√≥r trybu */}
                                        <div className="bg-white rounded-lg p-4 mb-4">
                                            <h4 className="font-semibold mb-3">Wybierz tryb ƒáwicze≈Ñ:</h4>
                                            <div className="flex gap-4">
                                                <button
                                                    onClick={() => setLateralizationState(prev => ({
                                                        ...prev,
                                                        mode: 'simple'
                                                    }))}
                                                    className={`px-4 py-2 rounded-lg font-medium ${
                                                        lateralizationState.mode === 'simple'
                                                            ? 'bg-indigo-500 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    }`}
                                                >
                                                    üéØ Proste D≈∫wiƒôki
                                                </button>
                                                <button
                                                    onClick={() => setLateralizationState(prev => ({
                                                        ...prev,
                                                        mode: 'sequence'
                                                    }))}
                                                    className={`px-4 py-2 rounded-lg font-medium ${
                                                        lateralizationState.mode === 'sequence'
                                                            ? 'bg-indigo-500 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    }`}
                                                >
                                                    üî¢ Sekwencje Cyfr
                                                </button>
                                            </div>
                                        </div>

                                        {/* Tryb prosty */}
                                        {lateralizationState.mode === 'simple' && (
                                            <div className="space-y-4">
                                                {!lateralizationState.currentEar ? (
                                                    <button
                                                        onClick={startSimpleLateralization}
                                                        className="w-full bg-indigo-600 text-white px-6 py-4 rounded-lg text-lg font-semibold hover:bg-indigo-700"
                                                    >
                                                        ‚ñ∂Ô∏è Odtw√≥rz D≈∫wiƒôk
                                                    </button>
                                                ) : (
                                                    <div className="space-y-4">
                                                        <p className="text-center text-gray-600">
                                                            Z kt√≥rej strony us≈Çysza≈Çe≈õ d≈∫wiƒôk?
                                                        </p>
                                                        
                                                        <div className="flex gap-4 justify-center">
                                                            <button
                                                                onClick={() => {
                                                                    const isCorrect = lateralizationState.currentEar === 'Lewe ucho';
                                                                    updateAdaptive(isCorrect);
                                                                    setLateralizationState(prev => ({
                                                                        ...prev,
                                                                        currentEar: '',
                                                                        panningValue: 0
                                                                    }));
                                                                }}
                                                                className="bg-blue-500 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-600"
                                                            >
                                                                üëÇ Lewe Ucho
                                                            </button>
                                                            
                                                            <button
                                                                onClick={() => {
                                                                    const isCorrect = lateralizationState.currentEar === 'Prawe ucho';
                                                                    updateAdaptive(isCorrect);
                                                                    setLateralizationState(prev => ({
                                                                        ...prev,
                                                                        currentEar: '',
                                                                        panningValue: 0
                                                                    }));
                                                                }}
                                                                className="bg-red-500 text-white px-8 py-3 rounded-lg font-semibold hover:bg-red-600"
                                                            >
                                                                üëÇ Prawe Ucho
                                                            </button>
                                                        </div>

                                                        <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                                                            <p className="text-sm text-yellow-800">
                                                                <strong>üë©‚Äç‚öïÔ∏è Dla terapeuty:</strong> 
                                                                Prawid≈Çowa odpowied≈∫: "{lateralizationState.currentEar}"
                                                            </p>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        )}

                                        {/* NOWY: Tryb sekwencji cyfr */}
                                        {lateralizationState.mode === 'sequence' && (
                                            <div className="space-y-4">
                                                {/* Ustawienia d≈Çugo≈õci */}
                                                <div className="bg-white rounded-lg p-4">
                                                    <h4 className="font-semibold mb-3">‚öôÔ∏è Ustawienia sekwencji:</h4>
                                                    <div className="flex items-center gap-4">
                                                        <span className="text-sm font-medium">D≈Çugo≈õƒá:</span>
                                                        <div className="flex gap-2">
                                                            {[2, 3, 4, 5, 6, 7, 8].map(num => (
                                                                <button
                                                                    key={num}
                                                                    onClick={() => setLateralizationState(prev => ({
                                                                        ...prev,
                                                                        sequenceLength: num
                                                                    }))}
                                                                    className={`w-8 h-8 rounded ${
                                                                        lateralizationState.sequenceLength === num
                                                                            ? 'bg-indigo-500 text-white'
                                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                                    }`}
                                                                >
                                                                    {num}
                                                                </button>
                                                            ))}
                                                        </div>
                                                    </div>
                                                    <div className="text-xs text-gray-500 mt-2">
                                                        üî¢ Cyfry odtwarzane alternujƒÖco: L-R-L-R... z szumem w tle
                                                    </div>
                                                </div>

                                                {lateralizationState.digitSequence.length === 0 ? (
                                                    <button
                                                        onClick={startDigitSequence}
                                                        className="w-full bg-indigo-600 text-white px-6 py-4 rounded-lg text-lg font-semibold hover:bg-indigo-700"
                                                    >
                                                        ‚ñ∂Ô∏è Odtw√≥rz Sekwencjƒô Cyfr ({lateralizationState.sequenceLength} cyfr)
                                                    </button>
                                                ) : (
                                                    <div className="space-y-4">
                                                        <div className="bg-white rounded-lg p-4 text-center">
                                                            <p className="text-gray-600 mb-4">
                                                                Wpisz cyfry w kolejno≈õci (L-R-L-R...):
                                                            </p>
                                                            
                                                            <div className="mb-4">
                                                                <strong>Twoja sekwencja:</strong> [{lateralizationState.userDigitSequence.join(', ')}]
                                                            </div>

                                                            {/* Klawiatura cyfr */}
                                                            <div className="grid grid-cols-5 gap-2 max-w-md mx-auto mb-4">
                                                                {[0,1,2,3,4,5,6,7,8,9].map(digit => (
                                                                    <button
                                                                        key={digit}
                                                                        onClick={() => addDigitToSequence(digit)}
                                                                        disabled={lateralizationState.userDigitSequence.length >= lateralizationState.digitSequence.length}
                                                                        className="bg-blue-500 text-white text-2xl py-3 px-4 rounded-lg font-bold hover:bg-blue-600 disabled:bg-gray-300"
                                                                    >
                                                                        {digit}
                                                                    </button>
                                                                ))}
                                                            </div>
                                                        </div>

                                                        <div className="flex gap-4 justify-center">
                                                            <button
                                                                onClick={() => setLateralizationState(prev => ({
                                                                    ...prev,
                                                                    userDigitSequence: prev.userDigitSequence.slice(0, -1)
                                                                }))}
                                                                disabled={lateralizationState.userDigitSequence.length === 0}
                                                                className="bg-orange-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-orange-600 disabled:bg-gray-300"
                                                            >
                                                                ‚¨ÖÔ∏è Cofnij
                                                            </button>
                                                            
                                                            <button
                                                                onClick={checkDigitSequence}
                                                                disabled={lateralizationState.userDigitSequence.length !== lateralizationState.digitSequence.length}
                                                                className="bg-green-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-600 disabled:bg-gray-300"
                                                            >
                                                                ‚úÖ Sprawd≈∫ Sekwencjƒô
                                                            </button>
                                                        </div>

                                                        <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                                                            <p className="text-sm text-yellow-800">
                                                                <strong>üë©‚Äç‚öïÔ∏è Dla terapeuty:</strong> 
                                                                Prawid≈Çowa sekwencja: [{lateralizationState.digitSequence.join(', ')}]
                                                                <br />
                                                                <span className="text-xs">
                                                                    üéß Wz√≥r L-R: {lateralizationState.digitSequence.map((d, i) => 
                                                                        `${d}(${i % 2 === 0 ? 'L' : 'R'})`
                                                                    ).join(' ‚Üí ')}
                                                                </span>
                                                            </p>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* üèÉ MODU≈Å: AUDIO + MOTOR */}
                            {currentModule === 'audioMotor' && (
                                <div className="space-y-6">
                                    <div className="bg-red-50 rounded-lg p-4">
                                        <h3 className="text-lg font-semibold text-red-800 mb-4">
                                            üèÉ Integracja S≈Çuchu i Ruchu
                                        </h3>

                                        <button
                                            onClick={() => {
                                                const command = audioMotorState.commands[
                                                    Math.floor(Math.random() * audioMotorState.commands.length)
                                                ];

                                                setAudioMotorState(prev => ({
                                                    ...prev,
                                                    currentCommand: command,
                                                    parentCheck: false
                                                }));

                                                if ('speechSynthesis' in window) {
                                                    const utterance = new SpeechSynthesisUtterance(command);
                                                    utterance.lang = 'pl-PL';
                                                    utterance.rate = 0.8;
                                                    window.speechSynthesis.speak(utterance);
                                                }
                                            }}
                                            className="w-full bg-red-600 text-white px-6 py-4 rounded-lg text-lg font-semibold hover:bg-red-700"
                                        >
                                            ‚ñ∂Ô∏è Odtw√≥rz Polecenie Ruchowe
                                        </button>
                                    </div>

                                    {audioMotorState.currentCommand && (
                                        <div className="bg-gray-50 rounded-lg p-6">
                                            <div className="text-center mb-6">
                                                <h4 className="text-2xl font-bold text-gray-800 mb-2">
                                                    {audioMotorState.currentCommand}
                                                </h4>
                                                <p className="text-gray-600">Dziecko powinno wykonaƒá to polecenie</p>
                                            </div>

                                            <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4 mb-4">
                                                <p className="text-sm text-yellow-800">
                                                    <strong>üë©‚Äç‚öïÔ∏è Dla terapeuty:</strong> 
                                                    Oce≈Ñ wykonanie ruchu przez dziecko. Zwr√≥ƒá uwagƒô na: szybko≈õƒá reakcji, precyzjƒô ruchu, zrozumienie polecenia.
                                                </p>
                                            </div>

                                            <div className="flex gap-4 justify-center">
                                                <button
                                                    onClick={() => {
                                                        updateAdaptive(true);
                                                        setAudioMotorState(prev => ({ 
                                                            ...prev, 
                                                            currentCommand: '', 
                                                            parentCheck: false 
                                                        }));
                                                    }}
                                                    className="bg-green-500 text-white px-8 py-3 rounded-lg font-semibold hover:bg-green-600"
                                                >
                                                    ‚úÖ Wykona≈Ç Poprawnie
                                                </button>

                                                <button
                                                    onClick={() => {
                                                        updateAdaptive(false);
                                                        setAudioMotorState(prev => ({ 
                                                            ...prev, 
                                                            currentCommand: '', 
                                                            parentCheck: false 
                                                        }));
                                                    }}
                                                    className="bg-red-500 text-white px-8 py-3 rounded-lg font-semibold hover:bg-red-600"
                                                >
                                                    ‚ùå Nie Wykona≈Ç / B≈Çƒôdnie
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            {/* Panel terapeuty */}
            {showParentPanel && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-96 overflow-y-auto">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-xl font-bold text-gray-800">
                                üìä Panel Terapeuty
                            </h3>
                            <button
                                onClick={() => setShowParentPanel(false)}
                                className="text-gray-500 hover:text-gray-700"
                            >
                                ‚ùå
                            </button>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className="bg-blue-50 p-4 rounded-lg">
                                <h4 className="font-semibold text-blue-800">Czas sesji</h4>
                                <p className="text-2xl font-bold text-blue-600">{formatTime(sessionTime)}</p>
                            </div>
                            
                            <div className="bg-green-50 p-4 rounded-lg">
                                <h4 className="font-semibold text-green-800">Aktualny SNR</h4>
                                <p className={`text-2xl font-bold ${getSNRColor(useManualSNR ? manualSNR : adaptiveState.currentSNR)}`}>
                                    {(useManualSNR ? manualSNR : adaptiveState.currentSNR).toFixed(1)}dB
                                </p>
                            </div>
                            
                            <div className="bg-purple-50 p-4 rounded-lg">
                                <h4 className="font-semibold text-purple-800">Seria poprawnych</h4>
                                <p className="text-2xl font-bold text-purple-600">{adaptiveState.correctStreak}</p>
                            </div>
                            
                            <div className="bg-orange-50 p-4 rounded-lg">
                                <h4 className="font-semibold text-orange-800">Zmƒôczenie</h4>
                                <p className="text-2xl font-bold text-orange-600">{fatigueLevel.toFixed(0)}%</p>
                            </div>
                        </div>

                        <div className="bg-gray-50 p-4 rounded-lg mb-4">
                            <h4 className="font-semibold text-gray-800 mb-2">üìà Historia SNR</h4>
                            <div className="text-sm text-gray-600">
                                {adaptiveState.history.length > 0 ? (
                                    <p>Ostatnie 10 warto≈õci: {adaptiveState.history.slice(-10).map(snr => snr.toFixed(1)).join(', ')}dB</p>
                                ) : (
                                    <p>Brak danych historycznych</p>
                                )}
                            </div>
                        </div>

                        <div className="bg-blue-50 p-4 rounded-lg mb-4">
                            <h4 className="font-semibold text-blue-800 mb-2">üîä System Szum√≥w</h4>
                            <div className="text-sm text-blue-700">
                                <p><strong>Aktywny typ szumu:</strong> {speechInNoiseState.noiseType} (mowa) | {soundRecognitionState.noiseType} (d≈∫wiƒôki)</p>
                                <p><strong>Kana≈Çy audio:</strong> Dwukana≈Çowe stereo z kontrolƒÖ SNR</p>
                                <p><strong>Timing:</strong> Szum natychmiast ‚Üí Mowa po 2s op√≥≈∫nieniu</p>
                            </div>
                        </div>

                        <div className="mt-4 flex gap-2">
                            <button
                                onClick={() => {
                                    const report = {
                                        sessionTime: formatTime(sessionTime),
                                        currentSNR: useManualSNR ? manualSNR : adaptiveState.currentSNR,
                                        correctStreak: adaptiveState.correctStreak,
                                        reversals: adaptiveState.reversals,
                                        history: adaptiveState.history,
                                        module: currentModule,
                                        noiseTypes: {
                                            speech: speechInNoiseState.noiseType,
                                            sounds: soundRecognitionState.noiseType
                                        },
                                        timestamp: new Date().toLocaleString('pl-PL')
                                    };
                                    
                                    const blob = new Blob([JSON.stringify(report, null, 2)], {
                                        type: 'application/json'
                                    });
                                    const url = URL.createObjectURL(blob);
                                    const a = document.createElement('a');
                                    a.href = url;
                                    a.download = `raport-apd-${new Date().toISOString().split('T')[0]}.json`;
                                    a.click();
                                }}
                                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center gap-2"
                            >
                                <Download />
                                Eksport Raportu
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Przycisk przerwy */}
            {fatigueLevel > 80 && (
                <div className="fixed bottom-4 right-4 bg-red-500 text-white p-4 rounded-lg shadow-lg">
                    <p className="font-semibold">‚ö†Ô∏è Czas na przerwƒô!</p>
                    <button
                        onClick={() => setFatigueLevel(0)}
                        className="bg-white text-red-500 px-3 py-1 rounded mt-2 text-sm"
                    >
                        Zr√≥b przerwƒô
                    </button>
                </div>
            )}

            {/* Footer z copyright */}
            <footer className="fixed bottom-0 left-0 right-0 bg-gray-900 text-white text-xs py-2 px-4 flex justify-between items-center z-10">
                <div className="flex items-center space-x-4">
                    <span>¬© 2025 Biokineticum Dariusz Mosler</span>
                    <span className="text-gray-400">|</span>
                    <span>Wszelkie prawa zastrze≈ºone</span>
                </div>
                <div className="flex items-center space-x-4">
                    <a 
                        href="mailto:biokineticum@proton.me" 
                        className="text-blue-400 hover:text-blue-300 transition-colors"
                        title="Kontakt"
                    >
                        üìß Kontakt
                    </a>
                    <span className="text-gray-400">|</span>
                    <span className="text-gray-400">v1.0</span>
                </div>
            </footer>
        </div>
    );
}

export default TreningAPD;